{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":377107,"sourceType":"datasetVersion","datasetId":165566},{"sourceId":407317,"sourceType":"datasetVersion","datasetId":181273}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:39:59.731103Z","iopub.execute_input":"2025-08-03T22:39:59.731561Z","iopub.status.idle":"2025-08-03T22:40:00.832718Z","shell.execute_reply.started":"2025-08-03T22:39:59.731538Z","shell.execute_reply":"2025-08-03T22:40:00.831951Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport itertools\nimport matplotlib.pyplot as plt \nimport os \n\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import confusion_matrix , classification_report  \nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.optimizers import Adam , Adamax \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras.regularizers import L1, L2\n# Import Resent Model\nimport keras\nfrom keras.applications.resnet50 import ResNet50\nfrom keras.applications.resnet50 import preprocess_input, decode_predictions\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:54:00.670082Z","iopub.execute_input":"2025-08-03T23:54:00.670613Z","iopub.status.idle":"2025-08-03T23:54:00.675834Z","shell.execute_reply.started":"2025-08-03T23:54:00.67059Z","shell.execute_reply":"2025-08-03T23:54:00.674833Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"data = '/kaggle/input/brain-mri-images-for-brain-tumor-detection'\nlabels = []\npath = []\n\nclass_folders = os.listdir(os.path.join(data,\"brain_tumor_dataset\"))\n\nfor folder_path in class_folders:\n    FolderPath = os.path.join(data,\"brain_tumor_dataset\",folder_path)\n    FolderImages = os.listdir(FolderPath)\n    for Fpath in FolderImages :\n        img = os.path.join(FolderPath,Fpath)\n        \n        path.append(img)\n        labels.append(folder_path)\n\ndf = pd.DataFrame({\n    'Img_Path': path,\n    'Img_Label': labels\n})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:10.060086Z","iopub.execute_input":"2025-08-03T22:57:10.061001Z","iopub.status.idle":"2025-08-03T22:57:10.080826Z","shell.execute_reply.started":"2025-08-03T22:57:10.060977Z","shell.execute_reply":"2025-08-03T22:57:10.080225Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:13.538681Z","iopub.execute_input":"2025-08-03T22:57:13.538946Z","iopub.status.idle":"2025-08-03T22:57:13.578493Z","shell.execute_reply.started":"2025-08-03T22:57:13.538924Z","shell.execute_reply":"2025-08-03T22:57:13.577779Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Splitting Data Into Train,Valid and Test","metadata":{}},{"cell_type":"code","source":"strat = df['Img_Label']\ndf_train, df_test = train_test_split(df,train_size = 0.8, shuffle = True, random_state = 42,stratify = strat)\nprint(df_train.shape, df_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:17.760773Z","iopub.execute_input":"2025-08-03T22:57:17.761002Z","iopub.status.idle":"2025-08-03T22:57:17.790839Z","shell.execute_reply.started":"2025-08-03T22:57:17.760987Z","shell.execute_reply":"2025-08-03T22:57:17.790203Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Distribution of Brain Tumor Disease","metadata":{}},{"cell_type":"code","source":"Tumor_Names = os.listdir(os.path.join(data,\"brain_tumor_dataset\"))\nTumor_Count = {Tumor_Name : len(os.listdir(os.path.join(data,Tumor_Name))) for Tumor_Name in Tumor_Names}\n\nplt.figure(figsize = (10,8))\nplt.bar(Tumor_Count.keys(),Tumor_Count.values(),color = 'skyblue')\nplt.xlabel('Brain Tumor Status')\nplt.ylabel('Nums of Images')\nplt.title('Distribution Of Brain Tumor Status')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:19.686103Z","iopub.execute_input":"2025-08-03T22:57:19.686352Z","iopub.status.idle":"2025-08-03T22:57:19.970456Z","shell.execute_reply.started":"2025-08-03T22:57:19.686334Z","shell.execute_reply":"2025-08-03T22:57:19.969755Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Creating Image Data Generator","metadata":{}},{"cell_type":"code","source":"img_size = (224,224)\nbatch_size = 8 \nchannels = 3\n\ntr_gen = ImageDataGenerator(\n    preprocessing_function =preprocess_input,\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True\n)\nts_gen = ImageDataGenerator(preprocessing_function =preprocess_input)\n\ntrain_gen = tr_gen.flow_from_dataframe(\n    df_train,\n    x_col = 'Img_Path',\n    y_col = 'Img_Label',\n    target_size = img_size,\n    class_mode= 'categorical',\n    color_mode = 'rgb',\n    shuffle = True,\n    batch_size = batch_size\n)\n\ntest_gen = ts_gen.flow_from_dataframe(\n    df_test,\n    x_col = \"Img_Path\",\n    y_col = \"Img_Label\",\n    target_size = img_size,\n    class_mode= \"categorical\",\n    color_mode = 'rgb',\n    shuffle = False,\n    batch_size = batch_size\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:22.409834Z","iopub.execute_input":"2025-08-03T22:57:22.410097Z","iopub.status.idle":"2025-08-03T22:57:22.748789Z","shell.execute_reply.started":"2025-08-03T22:57:22.410076Z","shell.execute_reply":"2025-08-03T22:57:22.74822Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## *Show Sample from Train Data*","metadata":{}},{"cell_type":"code","source":"g_dict = train_gen.class_indices\nclasses = list(g_dict.keys())\n\nimages, labels = next(train_gen)\n\nplt.figure(figsize = (20,10))\n\nfor i in range(6) :\n    plt.subplot(2,3,i + 1)\n    image = images[i] / 255 \n    plt.imshow(image)\n    index = np.argmax(labels[i])\n    class_name = classes[index]\n    plt.title(class_name,color = 'blue',fontsize = 15)\n    plt.axis('off')\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:25.078984Z","iopub.execute_input":"2025-08-03T22:57:25.079246Z","iopub.status.idle":"2025-08-03T22:57:26.039831Z","shell.execute_reply.started":"2025-08-03T22:57:25.079226Z","shell.execute_reply":"2025-08-03T22:57:26.039133Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# ResNet50 Architecture\n![](https://www.researchgate.net/profile/Master-Prince/publication/350421671/figure/fig1/AS:1005790324346881@1616810508674/An-illustration-of-ResNet-50-layers-architecture.png)","metadata":{}},{"cell_type":"markdown","source":"# Model Structure","metadata":{}},{"cell_type":"code","source":"img_shape = (img_size[0],img_size[1],channels)\nclass_count = len(classes)\n\n# We Will use Resnet Pre-trained Model\nbase_model = ResNet50(include_top = False,weights= \"imagenet\",input_shape= img_shape, pooling= 'max')\n\nmodel = Sequential([\n    base_model,\n    BatchNormalization(axis= -1, momentum= 0.99, epsilon= 0.001),\n    Dense(256,\n    kernel_regularizer=regularizers.L2(l2=0.016),\n    activity_regularizer=regularizers.L1(l1=0.006),\n    bias_regularizer=regularizers.L1(l1=0.006),\n    activation='relu'),\n    Dropout(rate= 0.45, seed= 123),\n    Dense(class_count, activation= 'softmax')\n\n])\n\nmodel.compile(Adamax(learning_rate = 0.001), loss = 'categorical_crossentropy', metrics= ['accuracy'])\n\nmodel.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T22:57:38.873822Z","iopub.execute_input":"2025-08-03T22:57:38.874283Z","iopub.status.idle":"2025-08-03T22:57:46.776791Z","shell.execute_reply.started":"2025-08-03T22:57:38.874259Z","shell.execute_reply":"2025-08-03T22:57:46.776241Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"epochs = 30\n\nhistory = model.fit(x = train_gen, epochs = epochs, verbose = 1, validation_data = test_gen, validation_steps = None, shuffle = False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:03:05.097306Z","iopub.execute_input":"2025-08-03T23:03:05.098016Z","iopub.status.idle":"2025-08-03T23:04:39.770615Z","shell.execute_reply.started":"2025-08-03T23:03:05.097994Z","shell.execute_reply":"2025-08-03T23:04:39.770005Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\nindex_loss = np.argmin(val_loss)\nval_lowest = val_loss[index_loss]\nindex_acc = np.argmax(val_acc)\nacc_highest = val_acc[index_acc]\nEpochs = [i+1 for i in range(len(train_acc))]\nloss_label = f'Best Epoch = {str(index_loss + 1)}'\nacc_label = f'Best Epoch = {str(index_acc + 1)}'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:07:19.695452Z","iopub.execute_input":"2025-08-03T23:07:19.695717Z","iopub.status.idle":"2025-08-03T23:07:19.70098Z","shell.execute_reply.started":"2025-08-03T23:07:19.6957Z","shell.execute_reply":"2025-08-03T23:07:19.700167Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize = (20,8))\nplt.style.use('fivethirtyeight')\n\nplt.subplot(1,2,1)\nplt.plot(Epochs, train_loss, 'r', label= 'Training loss')\nplt.plot(Epochs, val_loss, 'g', label= 'Validation loss')\nplt.scatter(index_loss + 1, val_lowest, s= 150, c= 'blue', label= loss_label)\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(Epochs, train_acc, 'r', label ='Training Accuracy')\nplt.plot(Epochs, val_acc, 'g', label ='Valdiation Accuracy')\nplt.scatter(index_acc + 1, acc_highest, s= 150, c= 'blue', label= acc_label)\nplt.title('Training and Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:07:22.613751Z","iopub.execute_input":"2025-08-03T23:07:22.614215Z","iopub.status.idle":"2025-08-03T23:07:23.086608Z","shell.execute_reply.started":"2025-08-03T23:07:22.614192Z","shell.execute_reply":"2025-08-03T23:07:23.085958Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Evaluate Model","metadata":{}},{"cell_type":"code","source":"train_score = model.evaluate(train_gen,verbose = 1)\ntest_score = model.evaluate(test_gen,verbose = 1)\n\nprint('Train Loss :',train_score[0])\nprint('Train Accuracy :',train_score[1])\nprint('-' * 30)\nprint('Test Loss :',test_score[0])\nprint('Test Accuracy :',test_score[1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:09:51.267965Z","iopub.execute_input":"2025-08-03T23:09:51.268549Z","iopub.status.idle":"2025-08-03T23:09:56.171226Z","shell.execute_reply.started":"2025-08-03T23:09:51.268523Z","shell.execute_reply":"2025-08-03T23:09:56.170533Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Get Predictions","metadata":{}},{"cell_type":"code","source":"preds = model.predict(test_gen)\ny_pred = np.argmax(preds,axis = 1)\ny_pred","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:47:54.803844Z","iopub.execute_input":"2025-08-03T23:47:54.804455Z","iopub.status.idle":"2025-08-03T23:47:55.203045Z","shell.execute_reply.started":"2025-08-03T23:47:54.804433Z","shell.execute_reply":"2025-08-03T23:47:55.202467Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"g_dict = test_gen.class_indices\nclasses = list(g_dict.keys())\ncm = confusion_matrix(test_gen.classes, y_pred)\n# Confusion Matrix\nplt.figure(figsize= (10, 10))\nplt.imshow(cm, interpolation= 'nearest', cmap= plt.cm.Blues)\nplt.title('Confusion Matrix')\nplt.colorbar()\n\ntick_marks = np.arange(len(classes))\nplt.xticks(tick_marks, classes, rotation= 45)\nplt.yticks(tick_marks, classes)\n\nthresh = cm.max() / 2.\nfor i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, cm[i, j], horizontalalignment= 'center', color= 'white' if cm[i, j] > thresh else 'black')\n\nplt.tight_layout()\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:54:18.796209Z","iopub.execute_input":"2025-08-03T23:54:18.796719Z","iopub.status.idle":"2025-08-03T23:54:19.032229Z","shell.execute_reply.started":"2025-08-03T23:54:18.796696Z","shell.execute_reply":"2025-08-03T23:54:19.031452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Classification Report\nprint(classification_report(test_gen.classes,y_pred, target_names = classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:56:19.640854Z","iopub.execute_input":"2025-08-03T23:56:19.641326Z","iopub.status.idle":"2025-08-03T23:56:19.65312Z","shell.execute_reply.started":"2025-08-03T23:56:19.641302Z","shell.execute_reply":"2025-08-03T23:56:19.652499Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Model Save\nmodel.save('Classification_Model.h5')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-03T23:57:07.074411Z","iopub.execute_input":"2025-08-03T23:57:07.074695Z","iopub.status.idle":"2025-08-03T23:57:08.075401Z","shell.execute_reply.started":"2025-08-03T23:57:07.074674Z","shell.execute_reply":"2025-08-03T23:57:08.074838Z"}},"outputs":[],"execution_count":null}]}